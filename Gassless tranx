// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13 ;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Fees is Ownable {
    using SafeMath for uint256;

    uint256 constant GWEI = 1e9;

    receive() external payable {}

    function getBalance() public view returns (uint256 fees) {
        fees = address(this).balance;
    }

    function sendEthToUser(address user) public payable {
        (bool sent,) = user.call{value: msg.value}("");
        require(sent, "Failed to send Ether");
        
        uint256 calcCost = (tx.gasprice).mul(block.gaslimit).mul(GWEI);
        (bool sentFee,) = msg.sender.call{value: calcCost}("");
        require(sentFee, "Failed to send Fees");
    }

    function sendEthToContract() public payable {
        (bool sentFee,) = address(this).call{value: msg.value}("");
        require(sentFee, "Failed to send Ether");
    }

    function getFees() public view returns (uint256 fees) {
        uint256 calcCost = (tx.gasprice).mul(block.gaslimit).mul(GWEI);
        fees = calcCost;
    }
}
